import os
import streamlit as st
import pandas as pd
from document_processor import extract_text
from analyzer import analyze_document
from utils import download_results, create_docx_results

# Add logging at startup
print("Starting Streamlit application...")
print(f"Environment PORT: {os.environ.get('PORT', 'Not set')}")
print(f"Current working directory: {os.getcwd()}")

# Set Streamlit configuration - must be first Streamlit command
st.set_page_config(
    page_title="–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –Æ—Ä–∏–¥–∏—á–Ω–∏—Ö –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

def main():
    st.markdown("""
        <style>
        .main-header {
            font-size: 2.5rem;
            color: #1E3D59;
            text-align: center;
            padding: 1rem;
            margin-bottom: 2rem;
            background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);
            border-radius: 10px;
        }
        .sub-header {
            color: #2E5077;
            font-size: 1.5rem;
            margin-top: 2rem;
            padding: 0.5rem;
            border-bottom: 2px solid #eee;
        }
        .stButton>button {
            width: 100%;
            border-radius: 5px;
            height: 3em;
            background-color: #1E3D59;
            color: white;
        }
        .upload-section {
            background-color: #f8f9fa;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }
        .analysis-options {
            background-color: #f8f9fa;
            padding: 2rem;
            border-radius: 10px;
            margin: 2rem 0;
        }
        .results-section {
            background-color: #ffffff;
            padding: 2rem;
            border-radius: 10px;
            border: 1px solid #eee;
            margin-top: 2rem;
        }
        .download-buttons {
            margin-top: 2rem;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 10px;
        }
        </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìÑ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –Æ—Ä–∏–¥–∏—á–Ω–∏—Ö –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤</h1>', unsafe_allow_html=True)

    # –°–µ–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    st.markdown('<div class="upload-section">', unsafe_allow_html=True)
    st.markdown('<h2 class="sub-header">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –î–æ–∫—É–º–µ–Ω—Ç–∞</h2>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç—É .doc, .docx –∞–±–æ .pdf", type=['doc', 'docx', 'pdf'])
    st.markdown('</div>', unsafe_allow_html=True)

    if uploaded_file:
        try:
            with st.spinner("‚è≥ –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—É..."):
                doc_text = extract_text(uploaded_file)
                st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")

            # –°–µ–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–Ω–∞–ª—ñ–∑—É
            st.markdown('<div class="analysis-options">', unsafe_allow_html=True)
            st.markdown('<h2 class="sub-header">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ê–Ω–∞–ª—ñ–∑—É</h2>', unsafe_allow_html=True)

            # –í–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
            query = st.text_area(
                "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
                help="–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∞—Å–ø–µ–∫—Ç–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ.",
                height=100
            )

            # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É –∞–Ω–∞–ª—ñ–∑—É
            analysis_mode = st.radio(
                "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∞–Ω–∞–ª—ñ–∑—É:",
                ["–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º", "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"],
                key="analysis_mode"
            )

            selected_types = None
            if analysis_mode == "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏":
                st.markdown('<h3 class="sub-header">–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–Ω–∞–ª—ñ–∑—É</h3>', unsafe_allow_html=True)

                # –ß–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
                col1, col2, col3, col4, col5 = st.columns(5)

                with col1:
                    analyze_risks = st.checkbox("üîç –ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤")
                with col2:
                    analyze_responsibility = st.checkbox("‚öñÔ∏è –ê–Ω–∞–ª—ñ–∑ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ")
                with col3:
                    analyze_obligations = st.checkbox("üìã –î–æ–≥–æ–≤—ñ—Ä–Ω—ñ –ó–æ–±–æ–≤'—è–∑–∞–Ω–Ω—è")
                with col4:
                    analyze_compliance = st.checkbox("üìú –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—É")
                with col5:
                    analyze_financial = st.checkbox("üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ —É–º–æ–≤–∏")

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
                selected_types = []
                if analyze_risks:
                    selected_types.append("risks")
                if analyze_responsibility:
                    selected_types.append("responsibility")
                if analyze_obligations:
                    selected_types.append("obligations")
                if analyze_compliance:
                    selected_types.append("compliance")
                if analyze_financial:
                    selected_types.append("financial")

            st.markdown('</div>', unsafe_allow_html=True)

            if st.button("üöÄ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –î–æ–∫—É–º–µ–Ω—Ç", type="primary"):
                if not query:
                    st.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
                    return

                if analysis_mode == "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏" and not selected_types:
                    st.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—É")
                    return

                progress_placeholder = st.empty()
                progress_bar = progress_placeholder.progress(0)
                status_text = st.empty()
                error_placeholder = st.empty()

                def update_progress(progress, message):
                    try:
                        progress_bar.progress(progress)
                        status_text.text(f"‚è≥ {message}")
                        if "–ü–æ–º–∏–ª–∫–∞" in message:
                            error_placeholder.error(f"‚ùå {message}")
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: {str(e)}")

                try:
                    analysis_results = analyze_document(
                        doc_text,
                        query,
                        selected_types,
                        progress_callback=update_progress
                    )

                    if "error" in analysis_results:
                        st.error(analysis_results["error"])
                        return

                    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                    st.markdown('<div class="results-section">', unsafe_allow_html=True)
                    st.markdown('<h2 class="sub-header">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ê–Ω–∞–ª—ñ–∑—É</h2>', unsafe_allow_html=True)

                    if analysis_mode == "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º":
                        st.markdown('<h3>üìù –ó–∞–≥–∞–ª—å–Ω–∏–π –ê–Ω–∞–ª—ñ–∑</h3>', unsafe_allow_html=True)
                        st.write(analysis_results["general"])
                    else:
                        headers = {
                            "risks": "‚ö†Ô∏è –ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤",
                            "responsibility": "‚öñÔ∏è –ê–Ω–∞–ª—ñ–∑ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ",
                            "obligations": "üìã –ê–Ω–∞–ª—ñ–∑ –î–æ–≥–æ–≤—ñ—Ä–Ω–∏—Ö –ó–æ–±–æ–≤'—è–∑–∞–Ω—å",
                            "compliance": "üìú –ê–Ω–∞–ª—ñ–∑ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—É",
                            "financial": "üí∞ –ê–Ω–∞–ª—ñ–∑ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –£–º–æ–≤"
                        }

                        for analysis_type in selected_types:
                            st.markdown(f'<h3>{headers[analysis_type]}</h3>', unsafe_allow_html=True)
                            st.write(analysis_results[analysis_type])

                    st.markdown('</div>', unsafe_allow_html=True)

                    # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    st.markdown('<div class="download-buttons">', unsafe_allow_html=True)
                    col1, col2 = st.columns(2)

                    with col1:
                        st.download_button(
                            label="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ TXT",
                            data=download_results(analysis_results, selected_types),
                            file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–∞–Ω–∞–ª—ñ–∑—É.txt",
                            mime="text/plain"
                        )

                    with col2:
                        docx_bytes = create_docx_results(analysis_results, selected_types).getvalue()
                        st.download_button(
                            label="üìë –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DOCX",
                            data=docx_bytes,
                            file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_–∞–Ω–∞–ª—ñ–∑—É.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    st.markdown('</div>', unsafe_allow_html=True)

                except Exception as e:
                    st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")
                finally:
                    progress_placeholder.empty()
                    status_text.empty()

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}")

    else:
        st.info("‚ÑπÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç—É .doc, .docx –∞–±–æ .pdf –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
        st.markdown("""
        ### üìå –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–æ–º:
        1. üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–æ—Ä–º–∞—Ç .doc, .docx –∞–±–æ .pdf)
        2. ‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
        3. üîÑ –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∞–Ω–∞–ª—ñ–∑—É:
           - –ê–Ω–∞–ª—ñ–∑ —Ç—ñ–ª—å–∫–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º
           - –ê–Ω–∞–ª—ñ–∑ –∑–∞ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        4. ‚òëÔ∏è –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        5. üöÄ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –î–æ–∫—É–º–µ–Ω—Ç' –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É
        6. üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (TXT –∞–±–æ DOCX)
        """)

if __name__ == "__main__":
    try:
        print("Initializing application...")
        main()
        print("Application started successfully")
    except Exception as e:
        print(f"Error starting application: {str(e)}")
        raise